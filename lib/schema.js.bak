const mongoose = require('mongoose')
const {MessageTypes} = require('./messageTypes'); //need to load dynamically
const {configEntry} = require('./declareSchemas');




const TestSchema = new mongoose.Schema({
  text: String,
  url: String,
});






//saves loaded schemas to mongoose object
function setTypeModels(types) {
    console.log("/// TYPES //////////",+types)
    for (ty in types) {
        console.log("////// TYPES[TY]  /////////",types[ty])
        let sch = new mongoose.Schema(types[ty].messageSchema);
        let mod = mongoose.model(types[ty].subUrl, sch)
    }
    // let sch = new mongoose.Schema(configModels[model].messageSchema);
    // //let sch = new mongoose.Schema(MessageTypes[type]);
    // let mod = mongoose.model(configModels[model].subUrl, sch)
    // messageModels.push(mod)

    // let sch = new mongoose.Schema(MessageTypes[type].messageSchema);
    // let mod = mongoose.model(MessageTypes[type].subUrl, sch)
    // watches.push(mod.watch())
    //messageModels.push(mod);
}

const checkDB = () => {
    let configModels = configEntry.find({})
    // if (configEntry.find().countDocuments() != 0) {
    //     //setTypeModels()
    //     return true
    // } else {
    //     return false
    // }
    return configEntry.find().countDocuments()
}

const loadFile = (file) => {
    let f = file //if valis file
    saveToDB(types) // add option for temp usage of file for testing
}

const saveToDB = (types) => {
    for (type in types) {
        let doc = new configEntry(types[type])
        doc.save(function (err) {
            if (err)  {
                throw new Error(err);
            } else {
                //console.log()
            }
        })
    }
}

const deleteModels = () => {
    let models = mongoose.modelNames()
    for (model in models) {
        if (models[model] != "MessageTypes") {
            mongoose.deleteModel(models[model])
        }
    }
}

const gatherFromDB = async () => {
    return configEntry.find()
}

const loadFromDB = async () => {
    let configModels = configEntry.find()
    let count = await configModels
    console.log("count obj:",count)
    if (count) {
        setTypeModels(count)
    }
}

const initTypeModels = async (file,useDefault) => {
    console.log('initTypeModels')
    let f = file
    if (f) {
        //if valid file or error
        await loadFile(f)
    } else {
        if (useDefault) {

        } else {
            if (checkDB()) { //wont work. i forgot it will always return true
                await loadFromDB()
                console.log("checkDB true: loadFromDB()")
            } else {
                loadFile(MessageTypes)
            }
        }
    }
}

//saves schema to DB from POJO module or loads from DB. default = 'messageTypes.js'
const initSaveSchema = (file) => {
    //if file is valid type
    //else error
    //default MessageTypes
    const f = file
    if (!f) f = MessageTypes //add file check
    //check database for entries. If none found, populate according to file
    if (configEntry.find().countDocuments() == 0) {
        setTypeModels(MessageTypes)
        for (type in MessageTypes) {
            // initTypeModels(Messagetypes[type])
            let doc = new configEntry(MessageTypes[type])
            doc.save(function (err) {
                if (err)  {
                    throw new Error(err);
                } else {
                    console.log(num)
                }
            })
        }
    } else {
        //let configModels = await configEntry.find({})
        return new Error("Initialization already done.")

        // for (model in configModels) {
        //     let sch = new mongoose.Schema(configModels[model].messageSchema);
        //     //let sch = new mongoose.Schema(MessageTypes[type]);
        //     let mod = mongoose.model(configModels[model].subUrl, sch)
        //     messageModels.push(mod)
        // }
    }
}


module.exports = {
    initTypeModels,
    TestSchema,
    gatherFromDB
}
